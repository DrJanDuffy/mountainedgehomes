const axios = require('axios');
const fs = require('fs');
const path = require('path');
const { createApi } = require('unsplash-js');
const nodeFetch = require('node-fetch');

// Replace with your actual Unsplash API key
// Get one at https://unsplash.com/developers
const UNSPLASH_ACCESS_KEY = 'YOUR_UNSPLASH_ACCESS_KEY';

// Configure Unsplash API client
const unsplash = createApi({
  accessKey: UNSPLASH_ACCESS_KEY,
  fetch: nodeFetch,
});

// Create directories for saving images
const DOWNLOAD_DIR = path.join(__dirname, 'real_estate_photos');
if (!fs.existsSync(DOWNLOAD_DIR)) {
  fs.mkdirSync(DOWNLOAD_DIR);
}

// Categories of real estate photos to download
const photoCategories = [
  { name: 'exterior', query: 'luxury home exterior las vegas', count: 5 },
  { name: 'kitchen', query: 'modern kitchen design', count: 5 },
  { name: 'living_room', query: 'luxury living room', count: 5 },
  { name: 'bedroom', query: 'master bedroom design', count: 5 },
  { name: 'bathroom', query: 'luxury bathroom', count: 5 },
  { name: 'pool', query: 'las vegas pool home', count: 5 },
  { name: 'aerial', query: 'las vegas neighborhood aerial', count: 3 }
];

// Function to download an image from a URL
async function downloadImage(url, filename) {
  try {
    const response = await axios({
      url,
      method: 'GET',
      responseType: 'stream'
    });
    
    const writer = fs.createWriteStream(path.join(DOWNLOAD_DIR, filename));
    
    response.data.pipe(writer);
    
    return new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });
  } catch (error) {
    console.error(`Error downloading ${url}: ${error.message}`);
  }
}

// Function to fetch and download images from Unsplash
async function fetchAndDownloadImages() {
  console.log('Starting to download real estate photos...');
  
  for (const category of photoCategories) {
    console.log(`Fetching ${category.count} ${category.name} photos...`);
    
    try {
      const result = await unsplash.search.getPhotos({
        query: category.query,
        perPage: category.count,
        orientation: 'landscape',
      });
      
      if (result.errors) {
        console.error('Error fetching from Unsplash:', result.errors[0]);
        continue;
      }
      
      const photos = result.response.results;
      
      for (let i = 0; i < photos.length; i++) {
        const photo = photos[i];
        const photographerName = photo.user.name.replace(/\s+/g, '_').toLowerCase();
        const filename = `${category.name}_${i + 1}_by_${photographerName}.jpg`;
        
        console.log(`Downloading ${filename}...`);
        
        await downloadImage(photo.urls.regular, filename);
        
        // Create a credit information file
        const creditInfo = {
          photographer: photo.user.name,
          profile: photo.user.links.html,
          photoUrl: photo.links.html,
          downloadedAt: new Date().toISOString(),
          category: category.name,
          query: category.query
        };
        
        fs.writeFileSync(
          path.join(DOWNLOAD_DIR, `${filename.replace('.jpg', '')}_credits.json`),
          JSON.stringify(creditInfo, null, 2)
        );
        
        // Respect API rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error(`Error processing ${category.name}: ${error.message}`);
    }
  }
  
  console.log('Download complete! Photos saved to', DOWNLOAD_DIR);
}

// Create a simple metadata file with information about the download
function createMetadataFile() {
  const metadata = {
    downloadDate: new Date().toISOString(),
    categories: photoCategories,
    totalPhotos: photoCategories.reduce((total, cat) => total + cat.count, 0),
    usage: 'These photos are for demonstration purposes for a Las Vegas realtor website. Please refer to individual credit files for proper attribution requirements.'
  };
  
  fs.writeFileSync(
    path.join(DOWNLOAD_DIR, 'photo_metadata.json'),
    JSON.stringify(metadata, null, 2)
  );
}

// Main execution
async function main() {
  try {
    await fetchAndDownloadImages();
    createMetadataFile();
    console.log('Script execution completed successfully.');
  } catch (error) {
    console.error('Error in main execution:', error.message);
  }
}

main();